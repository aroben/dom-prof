// Generated by CoffeeScript 1.3.3
(function() {
  var computeByteSize, computeNodesStats, computeSerializedDomSize, countParentNodes, findGlobals, findInlineScripts, findInlineStyles, findJqueryEventHandlers, findScripts, findStylesheetLinks, hasInlineScript, inlineEventAttrs, jQuery, jqueryFindCalls, jqueryFindTotal, jqueryMatchCalls, jqueryMatchTotal, jqueryReadyTotal;

  jQuery = null;

  window.__defineGetter__('jQuery', function() {
    return jQuery;
  });

  jqueryReadyTotal = 0;

  jqueryFindTotal = 0;

  jqueryFindCalls = {};

  jqueryMatchTotal = 0;

  jqueryMatchCalls = {};

  window.__defineSetter__('jQuery', function($) {
    var oldJqueryFind, oldJqueryMatches, oldJqueryMatchesSelector, oldJqueryReadyPromise, prop, value;
    oldJqueryReadyPromise = $.ready.promise;
    $.ready.promise = function() {
      jqueryReadyTotal++;
      return oldJqueryReadyPromise.apply(this, arguments);
    };
    oldJqueryFind = $.find;
    $.find = function(selector) {
      var _ref;
      if ((_ref = jqueryFindCalls[selector]) == null) {
        jqueryFindCalls[selector] = 0;
      }
      jqueryFindCalls[selector]++;
      jqueryFindTotal++;
      return oldJqueryFind.apply(this, arguments);
    };
    for (prop in oldJqueryFind) {
      value = oldJqueryFind[prop];
      $.find[prop] = value;
    }
    oldJqueryMatches = $.find.matches;
    $.find.matches = function(expr) {
      var _ref;
      if ((_ref = jqueryMatchCalls[expr]) == null) {
        jqueryMatchCalls[expr] = 0;
      }
      jqueryMatchCalls[expr]++;
      jqueryMatchTotal++;
      return oldJqueryMatches.apply(this, arguments);
    };
    oldJqueryMatchesSelector = $.find.matchesSelector;
    $.find.matchesSelector = function(node, expr) {
      var _ref;
      if ((_ref = jqueryMatchCalls[expr]) == null) {
        jqueryMatchCalls[expr] = 0;
      }
      jqueryMatchCalls[expr]++;
      jqueryMatchTotal++;
      return oldJqueryMatchesSelector.apply(this, arguments);
    };
    return jQuery = $;
  });

  countParentNodes = function(node) {
    var count;
    count = 0;
    while (node = node.parentNode) {
      count++;
    }
    return count;
  };

  computeNodesStats = function() {
    var count, max, node, nodes, total, _i, _len;
    total = 0;
    max = 0;
    nodes = document.getElementsByTagName('*');
    for (_i = 0, _len = nodes.length; _i < _len; _i++) {
      node = nodes[_i];
      count = countParentNodes(node);
      total += count;
      if (count > max) {
        max = count;
      }
    }
    return {
      total: nodes.length,
      maxDepth: max,
      averageDepth: total / nodes.length
    };
  };

  computeByteSize = function(string) {
    var bytes, charCode, i, _i, _ref;
    bytes = 0;
    for (i = _i = 0, _ref = string.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      charCode = string.charCodeAt(i);
      if (charCode <= 0x7F) {
        bytes += 1;
      } else if (charCode <= 0x7FF) {
        bytes += 2;
      } else if (charCode <= 0xFFFF) {
        bytes += 3;
      } else {
        bytes += 4;
      }
    }
    return bytes;
  };

  computeSerializedDomSize = function() {
    return computeByteSize(document.body.innerHTML);
  };

  findScripts = function() {
    return document.getElementsByTagName('script');
  };

  findStylesheetLinks = function() {
    var link, _i, _len, _ref, _results;
    _ref = document.getElementsByTagName('link');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      link = _ref[_i];
      if (link.rel === 'stylesheet') {
        _results.push(link);
      }
    }
    return _results;
  };

  inlineEventAttrs = ['onmouseover', 'onmouseout', 'onmousedown', 'onmouseup', 'onclick', 'ondblclick', 'onmousemove', 'onload', 'onerror', 'onbeforeunload', 'onfocus', 'onblur', 'ontouchstart', 'ontouchend', 'ontouchmove'];

  hasInlineScript = function(node) {
    var attr, _i, _len;
    if (node.href && node.href.indexOf('javascript:') === 0) {
      return true;
    }
    for (_i = 0, _len = inlineEventAttrs.length; _i < _len; _i++) {
      attr = inlineEventAttrs[_i];
      if (node.getAttribute(attr)) {
        return true;
      }
    }
    return false;
  };

  findInlineScripts = function() {
    var node, _i, _len, _ref, _results;
    _ref = document.getElementsByTagName('*');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      node = _ref[_i];
      if (hasInlineScript(node)) {
        _results.push(node);
      }
    }
    return _results;
  };

  findInlineStyles = function() {
    var node, _i, _len, _ref, _results;
    _ref = document.getElementsByTagName('*');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      node = _ref[_i];
      if (node.style.cssText.length > 0) {
        _results.push(node);
      }
    }
    return _results;
  };

  findGlobals = function() {
    var iframe, name, prop, properties, _results;
    properties = {};
    for (prop in window) {
      properties[prop] = true;
    }
    iframe = document.createElement('iframe');
    iframe.style.display = 'none';
    iframe.src = 'about:blank';
    document.body.appendChild(iframe);
    for (prop in iframe.contentWindow) {
      delete properties[prop];
    }
    document.body.removeChild(iframe);
    delete properties.$report;
    delete properties._phantom;
    delete properties.callPhantom;
    _results = [];
    for (name in properties) {
      _results.push(name);
    }
    return _results;
  };

  findJqueryEventHandlers = function() {
    var events, handler, handlers, key, node, nodes, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
    if (typeof $ === "undefined" || $ === null) {
      return {};
    }
    nodes = document.getElementsByTagName('*');
    events = {};
    _ref = $._data(window, 'events');
    for (key in _ref) {
      handlers = _ref[key];
      if ((_ref1 = events[key]) == null) {
        events[key] = [];
      }
      for (_i = 0, _len = handlers.length; _i < _len; _i++) {
        handler = handlers[_i];
        events[key].push(handler);
      }
    }
    _ref2 = $._data(document, 'events');
    for (key in _ref2) {
      handlers = _ref2[key];
      if ((_ref3 = events[key]) == null) {
        events[key] = [];
      }
      for (_j = 0, _len1 = handlers.length; _j < _len1; _j++) {
        handler = handlers[_j];
        events[key].push(handler);
      }
    }
    for (_k = 0, _len2 = nodes.length; _k < _len2; _k++) {
      node = nodes[_k];
      _ref4 = $._data(node, 'events');
      for (key in _ref4) {
        handlers = _ref4[key];
        if ((_ref5 = events[key]) == null) {
          events[key] = [];
        }
        for (_l = 0, _len3 = handlers.length; _l < _len3; _l++) {
          handler = handlers[_l];
          events[key].push(handler);
        }
      }
    }
    return events;
  };

  window.$report = function() {
    var cssRule, h, handlers, name, report, styleSheet, _i, _j, _len, _len1, _ref, _ref1, _ref2;
    report = {
      scriptTags: findScripts().length,
      stylesheetLinks: findStylesheetLinks().length,
      inlineScripts: findInlineScripts().length,
      inlineStyles: findInlineStyles().length,
      globals: findGlobals()
    };
    report.dom = computeNodesStats();
    report.dom.serializedSize = computeSerializedDomSize();
    report.cssRules = [];
    _ref = document.styleSheets;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      styleSheet = _ref[_i];
      _ref1 = styleSheet.cssRules;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        cssRule = _ref1[_j];
        if (cssRule.selectorText) {
          report.cssRules.push(cssRule.selectorText);
        }
      }
    }
    report.jquery = {
      event: {
        ready: {
          total: jqueryReadyTotal
        }
      },
      find: {
        total: jqueryFindTotal,
        calls: jqueryFindCalls
      },
      match: {
        total: jqueryMatchTotal,
        calls: jqueryMatchCalls
      }
    };
    _ref2 = findJqueryEventHandlers();
    for (name in _ref2) {
      handlers = _ref2[name];
      report.jquery.event[name] = {
        total: handlers.length,
        selectors: (function() {
          var _k, _len2, _results;
          _results = [];
          for (_k = 0, _len2 = handlers.length; _k < _len2; _k++) {
            h = handlers[_k];
            if (h.selector) {
              _results.push(h.selector);
            }
          }
          return _results;
        })()
      };
    }
    return report;
  };

}).call(this);
